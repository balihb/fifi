/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.8.1/userguide/java_library_plugin.html
 */
buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
          }
    }
    dependencies { 
        classpath "org.openapitools:openapi-generator-gradle-plugin:3.3.4"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:2.1.3.RELEASE"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.7.RELEASE"
        }
}

plugins { // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    id 'eclipse'
}

apply plugin: 'org.openapi.generator'
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    //api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'io.springfox:springfox-swagger2:2.9.2'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

openApiGenerate {
    generatorName = "spring"
    //verbose = true
    inputSpec = "${sourceSets.main.resources.srcDirs.find{ file("${it}/openapi.yaml").exists() }}/openapi.yaml"
    outputDir = "${buildDir}/generated"
    apiPackage = "balihb.fifi.fib.api"
    invokerPackage = "balihb.fifi.fib.invoker"
    modelPackage = "balihb.fifi.fib.model"
    configOptions = [
        dateLibrary: "java8",
        interfaceOnly: true
        //apiFirst: true
    ]
}

sourceSets {
    main {
        java {
            srcDirs += ["$buildDir/generated/src/main/java"]
        }
    }
}

compileJava.dependsOn tasks.openApiGenerate
eclipseClasspath.dependsOn tasks.openApiGenerate

task getApiYamlPath {
    doLast {
        println sourceSets
        println sourceSets.main
        println sourceSets.main.resources
        println sourceSets.main.resources.srcDirs.find{ file("${it}/openapi.yaml").exists() }
    }
}
